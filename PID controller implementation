{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNrORA+iNRDqiA29QN2nChv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dewwis/introduction-to-Advanced-Python/blob/main/PID%20controller%20implementation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "EMpN93dH4Wvf"
      },
      "outputs": [],
      "source": [
        "# make sure you have imported all the following modules first. then after successful importation we can proceed\n",
        "#we can use numpy to manipulate arrays \n",
        "import numpy as np \n",
        "import scipy as sp\n",
        "import scipy.integrate as spi\n",
        "#this package helps in the plotting of datasets\n",
        "import matplotlib.pyplot as plt "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "In python, the variable declaration is a very crucial step. we can do this in the following ways\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "GePY6kQD5Sij"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#integer declaration\n",
        "x=45\n",
        "#float declaration\n",
        "k=45.65\n",
        "#string declaration\n",
        "d='course'\n",
        "#list declaration\n",
        "j = [1,2,3,4]\n",
        "#null declaration which means nothing declared at all\n",
        "z= None\n",
        "#we can try to ouput the variables passed above in the following ways. \n",
        "print(f'{x}\\n{k}\\n{d}\\n{j}\\n{z}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EfSEX0fy5en6",
        "outputId": "e93074fd-ee25-40fe-d1fe-253e8bb13349"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "45\n",
            "45.65\n",
            "course\n",
            "[1, 2, 3, 4]\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "python can be used to solve mathematical problems as shown below. on the same way we can choose an object from the given list in the following ways. "
      ],
      "metadata": {
        "id": "5GlgYI-78pOp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#we can declare a list in the following ways.\n",
        "k = [4,5,6,7,8] \n",
        "#we can choose one object from the list, for instnace object 1 which is given by [0]\n",
        "the_element_to_print= k[0] \n",
        "#we can check the length of the list in the given ways. \n",
        "x_length = len(k)\n",
        "#we can now focus on the introduction of elements at the end of the  list\n",
        "k += [9,10] \n",
        "#theefore we can have an updated list with (4,5,6,7,8,9,10)\n",
        "print(k)\n",
        "\n",
        "# append 20\n",
        "k += [20]\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_IDBHtSq84-Z",
        "outputId": "f960ed96-668c-4ba3-be93-5924dbca9f7c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4, 5, 6, 7, 8, 9, 10]\n",
            "[4, 5, 6, 7, 8, 9, 10, 20]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "we can do the looping in the following ways"
      ],
      "metadata": {
        "id": "72GhcRMz-RrU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(10):\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zron0hN1-XHY",
        "outputId": "3ea15ec1-3af8-4f6b-fcd4-fba28cbb2bab"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(10):\n",
        "    print(i+1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ReweTMVf-m8I",
        "outputId": "34fee3f1-b35d-418b-ea8f-f570fadb6881"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(10):\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pHuJfHbQ-rte",
        "outputId": "5c7b7205-ea1f-4271-942b-3e059decf3c5"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "RIWaNAay_To4"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Fi_WHRNoEXi"
      },
      "source": [
        "ðŸš— **Do it yourself...**\n",
        "\n",
        "<img src=\"https://i.pinimg.com/736x/30/ea/d7/30ead7b9c9c46c35cb440aa9267e87c4.jpg\" width=\"500\" />\n",
        "\n",
        "What's wrong with the following code?"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "the code which is arranged in the following ways means that it is opposite of what is expected. we need a code flowing and providing what is intended at the end of  the every model. \n"
      ],
      "metadata": {
        "id": "7gIqLY_x_dcH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#a function to compute two variables and return the values is as shown below. \n",
        "a=input(\"enter your name:\")\n",
        "def addition_function(j,k):\n",
        "    y = j**2 + k**2 + 1\n",
        "    return y\n",
        "\n",
        "res = addition_function(5, 2)\n",
        "print(f\"res value={res}\\n Happy coding @{a}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9y875zdf_xmK",
        "outputId": "c60590bb-3b09-4988-ee3b-ca6af6bdcdbd"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter your name:Myself\n",
            "res value=30\n",
            " Happy coding @Myself\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Try this yourself: implement the following mathematical function in Python\n",
        "f(x,y,z)={x2+y2,3zâˆ’1, if x,y>1 or z>2 otherwise "
      ],
      "metadata": {
        "id": "_wKLmBU1BDXi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "x=1\n",
        "y=2\n",
        "z=3\n",
        "def three_functions(x,y,z):\n",
        "  if (x > 1 and y>1) or z>2:\n",
        "        return x**2 + y**2 \n",
        "  #i=(x**2)+(y**2)\n",
        "  #j=((3*z)-1)\n",
        "  return 3*z - 1\n",
        "\n",
        "  res = three_functions(x,y,z)\n",
        "print(res)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "awKs_C9_BExE",
        "outputId": "b7cfa2e3-1440-4d62-d7b3-c2e2a2653b4a"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.array([[1, 2, 3], \n",
        "              [4, 5, 6]])\n",
        "b = np.array([[7, 8, 9], \n",
        "              [10, 11, 12], \n",
        "              [13, 14, 15]])\n",
        "print(a)\n",
        "print(b)\n",
        "c = np.concatenate((a, b))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "USvYJlHMEWrx",
        "outputId": "94df7fe4-e526-4755-91ad-157fdf33a507"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n",
            "[[ 7  8  9]\n",
            " [10 11 12]\n",
            " [13 14 15]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "myType = np.dtype([\n",
        "    ('foo', 'u4'),\n",
        "    ('bar', 'f8')\n",
        "])\n",
        "\n",
        "a = np.array([(1,2), (3, 4)], dtype=myType)\n",
        "b = np.array([(5,6), (7,8)], dtype=myType)\n",
        "\n",
        "res = np.concatenate((a, b))\n",
        "print(res)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J-JPnDM7GF3f",
        "outputId": "0ed66789-99bb-47f1-9a0c-7c11b14ac803"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(1, 2.) (3, 4.) (5, 6.) (7, 8.)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Observe the syntax used to define a constructor: the first argument should be called `self` and represents the current instance of the class.\n",
        "\n",
        "Having defined this class we can use it to define instances of it, called **objects**, and we can afterwards access their attributes."
      ],
      "metadata": {
        "id": "cO0OXDs8HSp8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**HOW TO USE CLASSES IN PYTHON**"
      ],
      "metadata": {
        "id": "KN3jq5ujHTiA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Ball:\n",
        "\n",
        "    def __init__(self, radius = 1):\n",
        "        self.radius = radius\n",
        "\n",
        "    def diameter(self):\n",
        "        # Note that `self` is an argument of this method\n",
        "        return 2 * self.radius\n",
        "\n",
        "    def volume(self):\n",
        "        return 4 * np.pi * self.radius**3 / 3\n",
        "\n",
        "    def surface_area(self):\n",
        "        return 4 * np.pi * self.radius**2\n"
      ],
      "metadata": {
        "id": "WZxwFxzwIFOT"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ball = Ball(radius=10)\n",
        "print(f\"my ball has volume = {ball.volume()}\\nthe diameter is given as={ball.diameter()}\\n the surface area is given= {ball.surface_area()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1NQUTIC0HaQl",
        "outputId": "f2347572-f6e3-460f-e8fb-3969829b0971"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "my ball has volume = 4188.790204786391\n",
            "the diameter is given as=20\n",
            " the surface area is given= 1256.6370614359173\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the system dynamics as a function of the\n",
        "# form f(t, z)\n",
        "def f(t, z): \n",
        "    return np.arctan(z+2)\n",
        "\n",
        "\n",
        "t_final = 10\n",
        "z_init = 0.7\n",
        "num_points = 2000\n",
        "\n",
        "# Simulate the dynamical system\n",
        "sol = spi.solve_ivp(f, \n",
        "\t\t[0, t_final],\n",
        "\t\t[z_init], \n",
        "\t\tt_eval=np.linspace(0, t_final, num_points))\n",
        "\t\t\n",
        "# solve_ivp returns an object of type OdeResult; the solution\n",
        "# (t, x(t)) is stored in `sol.t` and `sol.y`. \n",
        "# Both are numpy arrays.\n",
        "print(sol.y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CXrt-JebJKqK",
        "outputId": "78d45a4e-b01f-4864-d822-81b69a07057d"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 2000)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Firstly: what are the shapes of the numpy arrays `sol.t` and `sol.y`?\n",
        "ts = sol.t\n",
        "ys = sol.y\n",
        "plt.plot(ts, ys.T)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "QWE_RngCI1sb",
        "outputId": "f2216c26-a338-4f72-bbec-fdcdb5069a35"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now solve the following 2D IVP:\n",
        "xË™=yË™=x(0)=y(0)=âˆ’y2,xy,1,âˆ’3,\n",
        "for tâˆˆ[0,40]. Hint: define the state variable z=(x,y). Plot the solution"
      ],
      "metadata": {
        "id": "QfWMw9SJJuuB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class DynamicModel:\n",
        "  #we can now define the essential models in the system\n",
        "  def __init__(self, Stock_Initial=0, Start_time=0, End_time=0, inflow=0, outflow=0):\n",
        "    self.Stock_Initial = Stock_Initial\n",
        "    self.Start_time = Start_time\n",
        "    self.End_time = End_time\n",
        "    self.inflow = inflow\n",
        "    self.outflow = outflow\n",
        "\n",
        "    #the model is simply involved in the addition for the difference between the inflow and the outflow multiplied by the time of the initial work. \n",
        "    def Stock_behaviour(self):\n",
        "      Difference = self.inflow - self.outflow\n",
        "      for time in range(self.Start_time, self.End_time+1,1):\n",
        "        Net_flow = Difference*time\n",
        "        print({time:self.Stock_Initial +Net_flow})"
      ],
      "metadata": {
        "id": "xhTNTYIhJtu6"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "SysDyn1 = DynamicModel(11,0,30,11,7)\n",
        "\n",
        "#SysDyn1.Stock_behaviour()\n",
        "a= SysDyn1.Stock_Initial\n",
        "b= SysDyn1.inflow\n",
        "c=SysDyn1.outflow\n",
        "\n",
        "print(f\"the intial value of the stock={a}\")\n",
        "print(f\"the value of inflow={b}\")\n",
        "print(f\"the value of outflow={c}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XRNVCeAsQxOF",
        "outputId": "a97a55a7-7483-4d0b-ffd4-da2d645e1540"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the intial value of the stock=11\n",
            "the value of inflow=11\n",
            "the value of outflow=7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class PidController:\n",
        "\n",
        "  def __init__(self, kp, ki, kd, ts):\n",
        "      # TODO: initialise all attributes of this class\n",
        "      # The arguments kp, ki, kd are the continuous-time \n",
        "      # gains of the PID controller and ts is the sampling\n",
        "      # time\n",
        "      self.__kp = kp\n",
        "      self.__ki = ki * ts\n",
        "      self.__kd = kd / ts\n",
        "      self.__sum_errors = 0\n",
        "      self.__previous_error = None\n",
        "     \n",
        "\n",
        "  def control(self, y, set_point=0):\n",
        "      # P for Proportional\n",
        "      error = set_point - y\n",
        "      u = self.__kp * error\n",
        "\n",
        "      # I for Integral\n",
        "      self.__sum_errors += error\n",
        "      u += self.__ki * self.__sum_errors\n",
        "\n",
        "      # D for Derivatives\n",
        "      if self.__previous_error is not None:\n",
        "          diff_errors = error - self.__previous_error\n",
        "          u += self.__kd * diff_errors\n",
        "      \n",
        "      self.__previous_error = error\n",
        "      return u\n",
        "\n",
        "\n",
        "\n",
        "brain = PidController(kp=1, kd=0.1, ki=0.5, ts=0.01)"
      ],
      "metadata": {
        "id": "D3in_2yoJCUq"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**PID Controller Implementation**"
      ],
      "metadata": {
        "id": "g0J77MRpTOGV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def proportional(PV, SP):\n",
        "    MV = Kp * (SP - PV)\n",
        "    return MV"
      ],
      "metadata": {
        "id": "MpQCaf5FTBPa"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def numbers_gen():\n",
        "    yield 0\n",
        "    yield 1\n",
        "    yield 2.7182818\n",
        "    yield 3.1415926"
      ],
      "metadata": {
        "id": "7KxpJ1oSTVes"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "numbers = numbers_gen()"
      ],
      "metadata": {
        "id": "h4QisYVHTY7T"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(next(numbers))\n",
        "print(next(numbers))\n",
        "print(next(numbers))\n",
        "print(next(numbers))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "foekKfQ7TcSG",
        "outputId": "198568b9-02f4-4b49-b308-bacfb2201bc4"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2.7182818\n",
            "3.1415926\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numbers = numbers_gen()\n",
        "print(numbers.send(None))\n",
        "print(numbers.send(None))\n",
        "print(numbers.send(None))\n",
        "print(numbers.send(None))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hqs7vDBwTjZD",
        "outputId": "1585d6b8-70ae-4ffe-f791-042e89ec31d4"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2.7182818\n",
            "3.1415926\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def texter_gen():\n",
        "    a = yield \"Started\"\n",
        "    b = yield a\n",
        "    yield b"
      ],
      "metadata": {
        "id": "NuSfiYi7Tnu9"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texter = texter_gen()\n",
        "print(texter.send(None))\n",
        "print(texter.send(\"Hello, World\"))\n",
        "print(texter.send(\"Go Irish\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5YyoUfrkTrJa",
        "outputId": "79c1afbf-04f6-4153-965d-71e65292a210"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Started\n",
            "Hello, World\n",
            "Go Irish\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# A function that will create generators\n",
        "def our_numbers():\n",
        "    n = 0\n",
        "    while True:\n",
        "        n = yield n*n"
      ],
      "metadata": {
        "id": "w8bqwzK7Tvlo"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# create a generator\n",
        "numbers = our_numbers()\n",
        "\n",
        "# start the generator\n",
        "numbers.send(None)        \n",
        "\n",
        "# send values to the generator and print the results\n",
        "print(numbers.send(4))\n",
        "print(numbers.send(12))\n",
        "print(numbers.send(42))\n",
        "\n",
        "# how to remove a generator when finished using it.\n",
        "numbers.close()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lph6OU02TxKq",
        "outputId": "8dff78cf-6dc2-40e1-b764-a48a187ce09d"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "16\n",
            "144\n",
            "1764\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def proportional(Kp, SP):\n",
        "    \"\"\"Creates proportional controllers with specified gain and setpoint.\"\"\"\n",
        "    MV = 0\n",
        "    while True:\n",
        "        PV = yield MV\n",
        "        MV = Kp * (SP - PV)"
      ],
      "metadata": {
        "id": "vWSKJ-YNT4eo"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "controller1 = proportional(10, 40)\n",
        "controller1.send(None)\n",
        "\n",
        "controller2 = proportional(1, 40)\n",
        "controller2.send(None)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t-onSDo4T7vc",
        "outputId": "f2a2a661-b003-446c-d908-0f080980d075"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "PV = 35\n",
        "\n",
        "print(\"Controller 1: MV = \", controller1.send(PV))\n",
        "print(\"Controller 2: MV = \", controller2.send(PV))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0FjwYXxJT_O1",
        "outputId": "4aa4331c-462d-47fe-cbdf-0e2adff07dc4"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Controller 1: MV =  50\n",
            "Controller 2: MV =  5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def PID(Kp, Ki, Kd, MV_bar=0):\n",
        "    # initialize stored data\n",
        "    e_prev = 0\n",
        "    t_prev = -100\n",
        "    I = 0\n",
        "    \n",
        "    # initial control\n",
        "    MV = MV_bar\n",
        "    \n",
        "    while True:\n",
        "        # yield MV, wait for new t, PV, SP\n",
        "        t, PV, SP = yield MV\n",
        "        \n",
        "        # PID calculations\n",
        "        e = SP - PV\n",
        "        \n",
        "        P = Kp*e\n",
        "        I = I + Ki*e*(t - t_prev)\n",
        "        D = Kd*(e - e_prev)/(t - t_prev)\n",
        "        \n",
        "        MV = MV_bar + P + I + D\n",
        "        \n",
        "        # update stored data for next iteration\n",
        "        e_prev = e\n",
        "        t_prev = t"
      ],
      "metadata": {
        "id": "_mR4UnCtUDB6"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install matplotlib\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CBftGvbuUZyV",
        "outputId": "221d2933-38ee-4861-8aa5-e542944e9846"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (3.2.2)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.21.5)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.4.0)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (3.0.7)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (0.11.0)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib) (3.10.0.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib) (1.15.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install tclab"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "432pEWaoUljp",
        "outputId": "fd0b3a3c-fc08-4cc8-83b3-6787182f3939"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting tclab\n",
            "  Downloading tclab-0.4.9-py2.py3-none-any.whl (28 kB)\n",
            "Collecting pyserial\n",
            "  Downloading pyserial-3.5-py2.py3-none-any.whl (90 kB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 90 kB 3.8 MB/s \n",
            "\u001b[?25hInstalling collected packages: pyserial, tclab\n",
            "Successfully installed pyserial-3.5 tclab-0.4.9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "from tclab import clock, setup, Historian, Plotter\n",
        "\n",
        "TCLab = setup(connected=False, speedup=10)\n",
        "\n",
        "controller = PID(2, 0.1, 2)        # create pid control\n",
        "controller.send(None)              # initialize\n",
        "\n",
        "tfinal = 800\n",
        "\n",
        "with TCLab() as lab:\n",
        "    h = Historian([('SP', lambda: SP), ('T1', lambda: lab.T1), ('MV', lambda: MV), ('Q1', lab.Q1)])\n",
        "    p = Plotter(h, tfinal)\n",
        "    T1 = lab.T1\n",
        "    for t in clock(tfinal, 2):\n",
        "        SP = T1 if t < 50 else 50           # get setpoint\n",
        "        PV = lab.T1                         # get measurement\n",
        "        MV = controller.send([t, PV, SP])   # compute manipulated variable\n",
        "        lab.U1 = MV                         # apply \n",
        "        p.update(t)                         # update information display"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 979
        },
        "id": "MpOiw0ceUIWh",
        "outputId": "5b053f56-77e7-4a07-dfad-fdf7f19d3a8a"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TCLab Model disconnected successfully.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NzxbtvHhCGXm"
      },
      "source": [
        "## 6. PID Controller Implementation\n",
        "\n",
        "We need to implement a discrete-time PID controller:\n",
        "\\begin{equation}\n",
        " u_k = K_{p, d}e_k + K_{d, d}(e_k - e_{k-1}) + K_{i, d}\\sum_{t=0}^{k}e_t,\n",
        "\\end{equation}\n",
        "where $e_k$ is the error at time instant $k$ defined as $e_k=y_k-y_k^{\\rm sp}$,\n",
        "and $K_{p, d}$, $K_{d, d}$ and $K_{i, d}$ are discrete-time PID parameters.\n",
        "For that, we will implement the following Python class"
      ]
    }
  ]
}